# frozen_string_literal: true

require 'netomox'
require_relative 'verifier_base'

module NetomoxExp
  # bgp-proc verifier
  class BgpProcVerifier < VerifierBase
    # @param [String] severity Base severity
    def verify(severity)
      @bgp_proc_nw.links.each do |bgp_proc_link|
        _, src_tp = find_node_tp_by_edge(bgp_proc_link.source)
        _, dst_tp = find_node_tp_by_edge(bgp_proc_link.destination)
        verify_link_pair(bgp_proc_link)
        verify_peer_params(src_tp, dst_tp)
      end
      @log_messages.filter { |msg| upper_severity?(msg, severity) }
    end

    private

    # @param [Netomox::Topology::TpRef] edge Link edge
    # @return [Array(Netomox::Topology::Node, Netomox::Topology::TermPoint)]
    def find_node_tp_by_edge(edge)
      bgp_proc_node = @bgp_proc_nw.find_node_by_name(edge.node_ref)
      bgp_proc_tp = bgp_proc_node.find_tp_by_name(edge.tp_ref)
      [bgp_proc_node, bgp_proc_tp]
    end

    # @param [Netomox::Topology::TermPoint] src_tp Source term-point
    # @param [Netomox::Topology::TermPoint] dst_tp Destination term-point
    # @return [String] link name which connects src/dst term-points
    def tps_to_link_name(src_tp, dst_tp)
      [src_tp.parent_name, src_tp.name, dst_tp.parent_name, dst_tp.name].join(',')
    end

    # @param [Netomox::Topology::TermPoint] src_tp Source term-point
    # @param [Netomox::Topology::TermPoint] dst_tp Destination term-point
    # @return [void]
    def check_peer_asn_ip(src_tp, dst_tp)
      # alias
      stp_attr = src_tp.attribute
      dtp_attr = dst_tp.attribute

      # NOTE: check src_tp.remote_as/ip == dst_tp.local_as/ip
      #   will be check src_tp.local_as/ip == dst_tp.remote_as/ip in reverse-link (bidirectional link)

      # NOTE: switch dst local_as when confederation config is not equal
      dst_local_as = dtp_attr.local_as
      if stp_attr.confederation != dtp_attr.confederation && dtp_attr.confederation.positive?
        dst_local_as = dtp_attr.confederation
      end

      return if stp_attr.remote_as == dst_local_as && stp_attr.remote_ip == dtp_attr.local_ip

      add_log_message(:error, tps_to_link_name(src_tp, dst_tp), 'ASN/IP does not correspond')
    end

    # @param [Netomox::Topology::TermPoint] src_tp Source term-point
    # @param [Netomox::Topology::TermPoint] dst_tp Destination term-point
    # @return [void]
    def check_timer(src_tp, dst_tp)
      return if src_tp.attribute.timer == dst_tp.attribute.timer

      add_log_message(:error, tps_to_link_name(src_tp, dst_tp), 'Timer params does not correspond')
    end

    # @param [Netomox::Topology::TermPoint] src_tp Source term-point
    # @param [Netomox::Topology::TermPoint] dst_tp Destination term-point
    # @return [void]
    def verify_peer_params(src_tp, dst_tp)
      check_peer_asn_ip(src_tp, dst_tp)
      check_timer(src_tp, dst_tp)
    end

    # @param [Netomox::Topology::Link] link
    # @return [void]
    def verify_link_pair(link)
      # NOTE: search pair (reverse) link, because bgp-proc layer is spliced two topologies:
      #   one is external-AS topology: generated by hand-written...MUST be checked
      #   another one is internal-AS topology: generated from config-files.

      # search pair (reverse) link
      return if @bgp_proc_nw.find_link(link.destination, link.source)

      add_log_message(:error, link.name, 'Reverse link is not found')
    end
  end
end
